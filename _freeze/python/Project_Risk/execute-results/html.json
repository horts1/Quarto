{
  "hash": "f07a3848bfce16955e75aee4bd34bf26",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Project Risk Example\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n\n### Example of Dummy Data\n\n::: {#731b44c5 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# Create dummy data\ndata = {\n    'ProjectID': range(1, 101),\n    'Duration': np.random.randint(10, 50, size=100),\n    'Budget': np.random.randint(50, 200, size=100),\n    'TeamSize': np.random.randint(5, 20, size=100),\n    'Complexity': np.random.randint(1, 10, size=100),\n    'PriorIssues': np.random.randint(0, 5, size=100),\n    'RiskEvent': np.random.randint(0, 2, size=100)  # 0 or 1\n}\n\ndf = pd.DataFrame(data)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ProjectID</th>\n      <th>Duration</th>\n      <th>Budget</th>\n      <th>TeamSize</th>\n      <th>Complexity</th>\n      <th>PriorIssues</th>\n      <th>RiskEvent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>45</td>\n      <td>76</td>\n      <td>9</td>\n      <td>5</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>22</td>\n      <td>161</td>\n      <td>13</td>\n      <td>4</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>19</td>\n      <td>169</td>\n      <td>17</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>29</td>\n      <td>121</td>\n      <td>8</td>\n      <td>8</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>17</td>\n      <td>60</td>\n      <td>15</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Predicting if there is going to be a Risk Event during a project:\n\n### Logistic Regression \n\n::: {#90981ad7 .cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n# Split the data into features (X) and target (y)\nX = df[['Duration', 'Budget', 'TeamSize', 'Complexity', 'PriorIssues']]\ny = df['RiskEvent']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Initialize and train the logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\n# conf_matrix = confusion_matrix(y_test, y_pred)\nclass_report = classification_report(y_test, y_pred)\n\nprint(\"Logistic Regression Accuracy is:\", format(accuracy,\".0%\"))\n\n# print(class_report)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Accuracy is: 50%\n```\n:::\n:::\n\n\n### Random Forest \n\n::: {#19abe5ed .cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n# Initialize and train the Random Forest model with hyperparameter tuning\nparam_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [None, 10, 20, 30],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\n\nrf = RandomForestClassifier(random_state=42)\ngrid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=3, n_jobs=-1, verbose=0)\ngrid_search.fit(X_train, y_train)\n\n# Best parameters from grid search\nbest_params = grid_search.best_params_\n\n# Train the best model\nbest_rf = grid_search.best_estimator_\nbest_rf.fit(X_train, y_train)\n\n# Predict on the test set\ny_pred = best_rf.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\n# conf_matrix = confusion_matrix(y_test, y_pred)\nclass_report = classification_report(y_test, y_pred)\n\nprint(\"Random Forest Accuracy is:\", format(accuracy,\".0%\"))\n\n# print(class_report)\n\n# best_params\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest Accuracy is: 50%\n```\n:::\n:::\n\n\n::: {#4e06db61 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Extract feature importances from the best model\nfeature_importances = best_rf.feature_importances_\n\n# Create a DataFrame for better visualization\nfeatures_df = pd.DataFrame({\n    'Feature': X.columns,\n    'Importance': feature_importances\n})\n\n# Sort the DataFrame by importance\nfeatures_df = features_df.sort_values(by='Importance', ascending=False)\n\n# Display the feature importances\nprint(\"Feature Importances:\")\nprint(features_df)\n\n# Plotting the feature importances\nplt.figure(figsize=(9, 5))\nsns.barplot(x='Importance', y='Feature', data=features_df, palette='viridis')\nplt.title('Feature Importances in Random Forest Model')\nplt.xlabel('Importance')\nplt.ylabel('Feature')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFeature Importances:\n       Feature  Importance\n1       Budget    0.389014\n0     Duration    0.203648\n2     TeamSize    0.159826\n3   Complexity    0.141312\n4  PriorIssues    0.106200\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Project_Risk_files/figure-html/cell-5-output-2.png){width=793 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "Project_Risk_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}