{
  "hash": "7ce7b916bb3d952e427c2a29b51eebd0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Project Cost Estimation Example\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n\n### Example of Dummy Data\n\n::: {#5f01a498 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# Create dummy data\nnp.random.seed(42)  # For reproducibility\n\ndata = {\n    'ProjectID': range(1, 101),\n    'Duration': np.random.randint(10, 50, size=100),\n    'TeamSize': np.random.randint(5, 20, size=100),\n    'Complexity': np.random.randint(1, 10, size=100),\n    'InitialBudget': np.random.randint(50, 200, size=100),\n    'PriorIssues': np.random.randint(0, 5, size=100),\n    'ProjectType': np.random.choice(['Residential', 'Commercial', 'Industrial'], size=100),\n    'TeamExperience': np.random.randint(1, 15, size=100),\n    'ExternalFactors': np.random.uniform(0.5, 1.5, size=100),\n    'ResourceAvailability': np.random.randint(1, 10, size=100),\n    'ProjectPhase': np.random.choice(['Design', 'Foundation', 'Structure', 'Finishing'], size=100),\n    'ActualCost': np.random.randint(60, 250, size=100)\n}\n\ndf = pd.DataFrame(data)\n\n# first few rows of the dataframe\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ProjectID</th>\n      <th>Duration</th>\n      <th>TeamSize</th>\n      <th>Complexity</th>\n      <th>InitialBudget</th>\n      <th>PriorIssues</th>\n      <th>ProjectType</th>\n      <th>TeamExperience</th>\n      <th>ExternalFactors</th>\n      <th>ResourceAvailability</th>\n      <th>ProjectPhase</th>\n      <th>ActualCost</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>48</td>\n      <td>11</td>\n      <td>8</td>\n      <td>117</td>\n      <td>4</td>\n      <td>Commercial</td>\n      <td>5</td>\n      <td>0.577735</td>\n      <td>2</td>\n      <td>Foundation</td>\n      <td>121</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>38</td>\n      <td>11</td>\n      <td>9</td>\n      <td>82</td>\n      <td>3</td>\n      <td>Commercial</td>\n      <td>6</td>\n      <td>1.474395</td>\n      <td>3</td>\n      <td>Design</td>\n      <td>191</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>24</td>\n      <td>18</td>\n      <td>4</td>\n      <td>191</td>\n      <td>4</td>\n      <td>Commercial</td>\n      <td>3</td>\n      <td>1.486211</td>\n      <td>3</td>\n      <td>Foundation</td>\n      <td>148</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>17</td>\n      <td>12</td>\n      <td>1</td>\n      <td>70</td>\n      <td>3</td>\n      <td>Commercial</td>\n      <td>8</td>\n      <td>1.198162</td>\n      <td>5</td>\n      <td>Structure</td>\n      <td>101</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>30</td>\n      <td>9</td>\n      <td>1</td>\n      <td>97</td>\n      <td>2</td>\n      <td>Commercial</td>\n      <td>13</td>\n      <td>1.036096</td>\n      <td>5</td>\n      <td>Structure</td>\n      <td>148</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Data Prep\n\n::: {#5e87a780 .cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\n# Convert categorical features to numerical values\nlabel_encoders = {}\ncategorical_features = ['ProjectType', 'ProjectPhase']\nfor feature in categorical_features:\n    le = LabelEncoder()\n    df[feature] = le.fit_transform(df[feature])\n    label_encoders[feature] = le\n\n# Split the data into features (X) and target (y)\nX = df.drop(columns=['ProjectID', 'ActualCost'])\ny = df['ActualCost']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n```\n:::\n\n\n### Model Training \n\n::: {#d36676dd .cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Initialize the RandomForestRegressor\nrf = RandomForestRegressor(random_state=42)\n\n# Train the model\nrf.fit(X_train, y_train)\n\n# Predict on the test set\ny_pred = rf.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\n# Output the results\nprint(\"Mean Squared Error:\", mse)\nprint(\"R^2 Score:\", r2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 3473.57541\nR^2 Score: -0.1123097958274566\n```\n:::\n:::\n\n\n### Hyperparameter Tuning\n\n::: {#aaca5a0e .cell execution_count=4}\n``` {.python .cell-code}\nfrom sklearn.model_selection import GridSearchCV\n\n# Define the parameter grid\nparam_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [None, 10, 20, 30],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\n\n# Initialize GridSearchCV with 3-fold cross-validation\ngrid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=3, n_jobs=-1, verbose=0)\n\n# Fit GridSearchCV to the data\ngrid_search.fit(X_train, y_train)\n\n# Best parameters and model performance\nbest_params = grid_search.best_params_\nbest_rf = grid_search.best_estimator_\n\n# print(\"Best Parameters from GridSearchCV:\")\n# print(best_params)\n\n# Predict on the test set with the best model\ny_pred_best = best_rf.predict(X_test)\n\n# Evaluate the best model\nmse_best = mean_squared_error(y_test, y_pred_best)\nr2_best = r2_score(y_test, y_pred_best)\n\n# Output the results\nprint(\"Mean Squared Error (Best Model):\", mse_best)\nprint(\"R^2 Score (Best Model):\", r2_best)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error (Best Model): 3345.293177772035\nR^2 Score (Best Model): -0.07123120483818601\n```\n:::\n:::\n\n\n### Feature Importance\n\n::: {#2df62419 .cell execution_count=5}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Extract feature importances from the best model\nfeature_importances = best_rf.feature_importances_\n\n# Create a DataFrame for better visualization\nfeatures_df = pd.DataFrame({\n    'Feature': X.columns,\n    'Importance': feature_importances\n})\n\n# Sort the DataFrame by importance\nfeatures_df = features_df.sort_values(by='Importance', ascending=False)\n\n# Display the feature importances\nprint(\"Feature Importances:\")\nprint(features_df)\n\n# Plotting the feature importances\nplt.figure(figsize=(10, 6))\nsns.barplot(x='Importance', y='Feature', data=features_df, palette='viridis')\nplt.title('Feature Importances in Random Forest Model')\nplt.xlabel('Importance')\nplt.ylabel('Feature')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFeature Importances:\n                Feature  Importance\n8  ResourceAvailability    0.184655\n3         InitialBudget    0.172776\n1              TeamSize    0.156746\n0              Duration    0.111923\n7       ExternalFactors    0.105970\n6        TeamExperience    0.092655\n4           PriorIssues    0.066102\n2            Complexity    0.062543\n5           ProjectType    0.029834\n9          ProjectPhase    0.016797\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Project_Cost_files/figure-html/cell-6-output-2.png){width=925 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "Project_Cost_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}